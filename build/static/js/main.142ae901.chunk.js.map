{"version":3,"sources":["components/Header.js","containers/Home.js","containers/detail/Postdetail.js","containers/Services.js","containers/Showcase.js","containers/haslogin/ListPost.js","containers/haslogin/AddPost.js","components/BtnIcon.js","containers/haslogin/EditPost.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Home","useState","post","setPost","useEffect","loadData","a","fetch","response","json","data","map","key","value","datepost","pathname","slugpost","titlepost","Postdetail","props","slug","match","params","style","textAlign","marginTop","authorpost","dangerouslySetInnerHTML","val","contentpost","__html","Services","Showcase","ListPost","width","color","idpost","float","AddPost","onChange","event","newdata","state","form","target","name","setState","onTitle","onSubmit","isLoading","requestOptions","method","headers","body","JSON","stringify","console","log","editorConfiguration","placeholder","catpost","tagpost","isDisabled","isStatus","fontSize","html","this","disabled","editor","BallonEditor","config","getData","type","onClick","height","React","Component","BtnIcon","icon","faCog","builtinPlugins","plugin","pluginName","EditPost","componentDidMount","id","onUpdate","onInit","ckfinder","uploadUrl","image","toolbar","styles","catname","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.142ae901.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport '../assets/css/App.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"menu\">\r\n        <Link className=\"logo\" to=\"/\">Skar.id</Link>\r\n        <Link className=\"item\" to=\"/\">Learn Programming</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Fragment, useState, useEffect  } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport '../assets/css/App.css';\r\nimport '../assets/css/Font.css';\r\n\r\nfunction Home() {\r\n\r\n  const [post, setPost] = useState([]);\r\n\r\n  useEffect(() => { \r\n    loadData()\r\n  },[]);\r\n\r\n  const loadData = async () => {\r\n    const response =await fetch('http://localhost:4000/api/post/')\r\n    const data = await response.json()\r\n    setPost(data)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"main\">\r\n        <h1 className=\"font-1\">Tutorial React Dalam Bahasa Indonesia</h1>\r\n        <h3 className=\"font-3\">Hanya sebuah dokumentasi tertulis agar tidak lupa tentang hal yang sudah pernah saya pelajari. dan berusaha membagikanya bagi para pembaca.</h3>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"post\">\r\n          {\r\n            post.map((key,value) => (\r\n              <div className=\"postitem\" key={value}>\r\n                <p className=\"datepost\">{key.datepost}</p> \r\n                <Link to={{pathname:'post/'+key.slugpost}}><h4 className=\"font-4\">{key.titlepost}</h4></Link> \r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport '../../assets/css/App.css';\r\nimport '../../assets/css/ckeditor.css';\r\n\r\nfunction Postdetail(props) {\r\n  \r\n  const slug = props.match.params.slug\r\n\r\n  const [post, setPost] = useState([])\r\n\r\n  useEffect(() => { \r\n    loadData()\r\n  },[]);\r\n\r\n  const loadData = async () => {\r\n    const response =await fetch('http://localhost:4000/api/post/'+slug)\r\n    const data = await response.json()\r\n    setPost(data)\r\n  }\r\n\r\n  function createMarkup(val) {\r\n    return {__html: val};\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n        {\r\n            post.map((key,value) => (\r\n                <div className=\"main\" key={value}>\r\n                    <p style={{textAlign:\"center\",marginTop:40}} className=\"datepost\">{key.datepost} - {key.authorpost}</p>\r\n                    <h1 style={{textAlign:\"center\"}} className=\"font-1\">{key.titlepost}</h1>\r\n                    <div className=\"divider\"></div>\r\n                    <div className=\"paragraph\"></div>\r\n                    <div className=\"paragraph\" dangerouslySetInnerHTML={createMarkup(key.contentpost)} style={{marginTop:'35px'}} />\r\n                </div>\r\n            ))\r\n        }\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Postdetail;\r\n","import React, { Fragment } from 'react';\r\nimport '../assets/css/App.css';\r\n\r\nfunction Services() {\r\n  return (\r\n    <Fragment>\r\n        <div className=\"container\">\r\n        <p>\r\n          Services <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Services;\r\n","import React, { Fragment } from 'react';\r\nimport '../assets/css/App.css';\r\n\r\nfunction Showcase() {\r\n  return (\r\n    <Fragment>\r\n        <div className=\"container\">\r\n        <p>\r\n          Showcase <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        </div>\r\n        \r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Showcase;\r\n","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";    \r\nimport '../../assets/css/App.css';\r\n\r\nfunction ListPost() {\r\n\r\n    const [post, setPost] = useState([]);\r\n\r\n    useEffect(() => { \r\n      loadData()\r\n    },[]);\r\n  \r\n    const loadData = async () => {\r\n      const response =await fetch('http://localhost:4000/api/post/')\r\n      const data = await response.json()\r\n      setPost(data)\r\n    }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"main\">\r\n        <Link to=\"/admin/add/post\">\r\n            <button className=\"btn-2\">Create Post</button>\r\n        </Link>\r\n        {\r\n            post.map((key,value) => (\r\n              <div className=\"adminlist\" key={value}>\r\n                <div style={{width:'85%'}} className=\"row\">\r\n                    <p className=\"font-3\">{key.titlepost}</p>\r\n                    <p className=\"font-3\" style={{color:'#8e9095'}}>published : {key.datepost}</p>\r\n                </div>\r\n                <div style={{width:'15%'}} className=\"row\">\r\n                    <Link to={{pathname:'/admin/edit/post/'+key.idpost}}>\r\n                        <button style={{float:'right'}} className=\"btn-1\">Sunting</button>\r\n                    </Link>\r\n                </div>\r\n              </div>\r\n            ))\r\n        } \r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ListPost;\r\n","import React, { Fragment } from 'react';\r\nimport Loading from 'react-loading';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport BallonEditor from '@ckeditor/ckeditor5-build-balloon-block';\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport '../../assets/css/App.css';\r\nimport '../../assets/css/Form.css';\r\n\r\nclass AddPost extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            form: {\r\n                titlepost:'Judul Postingan',\r\n                contentpost:'',\r\n                catpost:1,\r\n                tagpost:'',\r\n                authorpost:1\r\n            },\r\n            isLoading: false,\r\n            isDisabled:false,\r\n            isStatus:''\r\n        }\r\n    }\r\n  \r\n    onChange = (event) => {\r\n        let newdata = {...this.state.form}\r\n        newdata[event.target.name] = event.target.value\r\n        this.setState({\r\n            form: newdata\r\n        })\r\n    }\r\n\r\n    onTitle = (event) => {\r\n        let newdata = {...this.state.form}\r\n        newdata['titlepost'] = event.target.value\r\n        this.setState({\r\n            form: newdata\r\n        })\r\n    }\r\n\r\n    onSubmit = async () => {\r\n        this.setState({isLoading:true})\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(this.state.form)\r\n        };\r\n        const response = await fetch('http://localhost:4000/api/post/', requestOptions);\r\n        const data = await response.json();\r\n        if(data.response == 'success') {\r\n            this.setState({isLoading:false})\r\n            console.log('hore data berhasil disubmit')\r\n        } else {\r\n            this.setState({isLoading:false})\r\n            console.log('sedih, data gagal disubmit')\r\n        }\r\n    }\r\n\r\n    editorConfiguration = {\r\n        placeholder: 'Apa yang anda pikirkan...'\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"main\">\r\n                    <div className=\"formfield\">\r\n                        <ContentEditable\r\n                            style={{fontSize:'2.5rem',color:'#1a202c'}} \r\n                            className=\"font-1\"\r\n                            html={this.state.form.titlepost} // innerHTML of the editable div\r\n                            disabled={false} // use true to disable edition\r\n                            onChange={this.onTitle}\r\n                        />\r\n                    </div>\r\n                    <div className=\"formfield\" style={{marginTop:'0px'}}>\r\n                        <CKEditor\r\n                        editor={ BallonEditor }\r\n                        data={this.state.form.contentpost}\r\n                        config = {this.editorConfiguration}\r\n                        onChange={ ( event, editor ) => {\r\n                            const data = editor.getData();\r\n                            let newdata = {...this.state.form}\r\n                            newdata['contentpost'] = data\r\n                            this.setState({\r\n                                form: newdata\r\n                            })\r\n                        } }\r\n                        />\r\n                    </div>\r\n                    <div className=\"formfield\">\r\n                        <select className=\"minimal\" name=\"catpost\" onChange={this.onChange}>\r\n                            <option value=\"1\">React</option>\r\n                            <option value=\"2\">Native</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"formfield\">\r\n                        <input type=\"text\" name=\"tagpost\" placeholder=\"contoh : #tagname#tagname\" onChange={this.onChange} />\r\n                    </div>\r\n                    \r\n                    <button onClick={this.onSubmit}>\r\n                        {\r\n                            this.state.isLoading ?\r\n                            <Loading type=\"spin\" color=\"#fff\" width=\"24px\" height=\"24px\" />\r\n                            :\r\n                            <span>Submit</span>\r\n                        }\r\n                        \r\n                    </button>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddPost;\r\n\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction BtnIcon() {\r\n  return (\r\n    <button className=\"btnsettingPost\">\r\n       <FontAwesomeIcon icon={faCog}  /> \r\n    </button>\r\n  );\r\n}\r\n\r\nexport default BtnIcon;\r\n","import React, { Fragment } from 'react';\r\nimport Loading from 'react-loading';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport BallonEditor from '@ckeditor/ckeditor5-build-balloon-block';\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport '../../assets/css/App.css';\r\nimport '../../assets/css/Form.css';\r\nimport BtnIcon from '../../components/BtnIcon';\r\n\r\nconsole.log(BallonEditor.builtinPlugins.map( plugin => plugin.pluginName ))\r\n\r\nclass EditPost extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            form: {\r\n                idpost: '',\r\n                titlepost:'',\r\n                contentpost:'',\r\n                catpost:'',\r\n                tagpost:'',\r\n                authorpost:1\r\n            },\r\n            isLoading: false,\r\n            isDisabled:false,\r\n            isStatus:''\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const id = this.props.match.params.id\r\n        const response = await fetch('http://localhost:4000/api/editpost/'+id)\r\n        const data = await response.json()\r\n        this.setState({\r\n            form: data[0]\r\n        })\r\n    }\r\n  \r\n    onChange = (event) => {\r\n        let newdata = {...this.state.form}\r\n        newdata[event.target.name] = event.target.value\r\n        this.setState({\r\n            form: newdata\r\n        })\r\n    }\r\n\r\n    onTitle = (event) => {\r\n        let newdata = {...this.state.form}\r\n        newdata['titlepost'] = event.target.value\r\n        this.setState({\r\n            form: newdata\r\n        })\r\n    }\r\n\r\n    onUpdate = async () => {\r\n        this.setState({isLoading:true})\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(this.state.form)\r\n        };\r\n        const response = await fetch('http://localhost:4000/api/post/', requestOptions);\r\n        const data = await response.json();\r\n        if(data.response == 'success') {\r\n            this.setState({isLoading:false})\r\n            console.log('hore data berhasil disubmit')\r\n        } else {\r\n            this.setState({isLoading:false})\r\n            console.log('sedih, data gagal disubmit')\r\n        }\r\n    }\r\n\r\n    editorConfiguration = {\r\n        placeholder: 'Apa yang anda pikirkan...'\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"main\">\r\n                        <div className=\"formfield\">\r\n                            <ContentEditable\r\n                                style={{fontSize:'2.5rem',color:'#1a202c'}} \r\n                                className=\"font-1\"\r\n                                html={this.state.form.titlepost} // innerHTML of the editable div\r\n                                disabled={false} // use true to disable edition\r\n                                onChange={this.onTitle}\r\n                                \r\n                            />\r\n                        </div>\r\n                        <div className=\"formfield\" style={{marginTop:'0px'}}>\r\n                            <CKEditor\r\n                            editor={ BallonEditor }\r\n                            data={this.state.form.contentpost}\r\n                            config = {this.editorConfiguration}\r\n                            onInit={ editor => {\r\n\r\n                            }}\r\n                            config={\r\n                                {\r\n                                    ckfinder: {\r\n                                        // Upload the images to the server using the CKFinder QuickUpload command.\r\n                                        uploadUrl: 'http://localhost:4000/upload'\r\n                                    },\r\n                                    image: {\r\n                                        toolbar: ['imageStyle:full','imageStyle:side','imageStyle:alignLeft','imageStyle:alignCenter','imageStyle:alignRight','|','imageTextAlternative'],\r\n                                        styles: ['full','side','alignLeft','alignCenter','alignRight']\r\n                                    }\r\n                                }\r\n                            }\r\n                            onChange={ ( event, editor ) => {\r\n                                const data = editor.getData();\r\n                                let newdata = {...this.state.form}\r\n                                newdata['contentpost'] = data\r\n                                this.setState({\r\n                                    form: newdata\r\n                                })\r\n                            }}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <button className=\"btnActions\" onClick={this.onUpdate}>\r\n                            {\r\n                                this.state.isLoading ?\r\n                                <Loading type=\"spin\" color=\"#fff\" width=\"24px\" height=\"24px\" />\r\n                                :\r\n                                <span>Update</span>\r\n                            }\r\n                        </button>\r\n                        <BtnIcon />\r\n                    </div>\r\n                    <div className=\"sidebar\">\r\n                        <select className=\"minimal\" name=\"catpost\" onChange={this.onChange}>\r\n                                <option value={this.state.form.catpost}>{this.state.form.catname}</option>\r\n                                <option value=\"1\">React</option>\r\n                                <option value=\"2\">Native</option>\r\n                        </select>\r\n                        <input type=\"text\" name=\"tagpost\" placeholder=\"contoh : #tagname#tagname\" onChange={this.onChange} value={this.state.form.tagpost} />\r\n                    </div>\r\n                </div>\r\n                \r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditPost;\r\n\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './assets/css/App.css';\nimport Header from './components/Header';\nimport Home from './containers/Home'\nimport Post from './containers/Post'\nimport Postdetail from './containers/detail/Postdetail'\nimport Services from './containers/Services'\nimport Showcase from './containers/Showcase'\n\nimport ListPost from './containers/haslogin/ListPost'\nimport AddPost from './containers/haslogin/AddPost'\nimport EditPost from './containers/haslogin/EditPost'\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"body\">\n          <Header />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/post/:slug\" component={Postdetail} />\n            <Route path=\"/services\" component={Services} />\n            <Route path=\"/showcase\" exact component={Showcase} />\n\n            <Route path=\"/admin/add/post\" exact component={AddPost} />\n            <Route path=\"/admin/edit/post/:id\" exact component={EditPost} />\n            <Route path=\"/admin/list/post\" exact component={ListPost} />\n          </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}